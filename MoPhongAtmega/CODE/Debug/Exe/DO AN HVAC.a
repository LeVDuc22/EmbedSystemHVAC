;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 12/05/2023
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega8
;Program type            : Application
;AVR Core Clock frequency: 1.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <init_all.c>
;#include <alcd.h>
;void fn_initall()
; 0000 0019 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;    // Input/Output Ports initialization
;    // Port B initialization
;    // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=Out Bit1=Out Bit0=Out
;    DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;    // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=0 Bit1=0 Bit0=0
;    PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;
;    // Port C initialization
;    // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
;    DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;    // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
;    PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (1<<PORTC2) | (1<<PORTC1) | (0<<PORTC0);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;
;    // Port D initialization
;    // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
;    DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;    // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
;    PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;
;    // Timer/Counter 0 initialization
;    // Clock source: System Clock
;    // Clock value: Timer 0 Stopped
;    TCCR0=(0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;    TCNT0=0x00;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;
;    // Timer/Counter 1 initialization
;    // Clock source: System Clock
;    // Clock value: Timer1 Stopped
;    // Mode: Normal top=0xFFFF
;    // OC1A output: Disconnected
;    // OC1B output: Disconnected
;    // Noise Canceler: Off
;    // Input Capture on Falling Edge
;    // Timer1 Overflow Interrupt: Off
;    // Input Capture Interrupt: Off
;    // Compare A Match Interrupt: Off
;    // Compare B Match Interrupt: Off
;    TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;    TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;    TCNT1H=0x00;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;    TCNT1L=0x00;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;    ICR1H=0x00;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;    ICR1L=0x00;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;    OCR1AH=0x00;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;    OCR1AL=0x00;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;    OCR1BH=0x00;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;    OCR1BL=0x00;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;
;    // Timer/Counter 2 initialization
;    // Clock source: System Clock
;    // Clock value: Timer2 Stopped
;    // Mode: Normal top=0xFF
;    // OC2 output: Disconnected
;    ASSR=0<<AS2;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;    TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;    TCNT2=0x00;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;    OCR2=0x00;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;
;    // Timer(s)/Counter(s) Interrupt(s) initialization
;    TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<TOIE0);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;
;    // External Interrupt(s) initialization
;    // INT0: Off
;    // INT1: Off
;    MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;
;    // USART initialization
;    // USART disabled
;    UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;
;    // Analog Comparator initialization
;    // Analog Comparator: Off
;    // The Analog Comparator's positive input is
;    // connected to the AIN0 pin
;    // The Analog Comparator's negative input is
;    // connected to the AIN1 pin
;    ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;    SFIOR=(0<<ACME);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;
;    // ADC initialization
;    // ADC disabled
;    ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;
;    // SPI initialization
;    // SPI disabled
;    SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;
;    // TWI initialization
;    // TWI disabled
;    TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;
;    // Alphanumeric LCD initialization
;    // Connections are specified in the
;    // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
;    // RS - PORTD Bit 0
;    // RD - PORTD Bit 1
;    // EN - PORTD Bit 2
;    // D4 - PORTD Bit 3
;    // D5 - PORTD Bit 4
;    // D6 - PORTD Bit 5
;    // D7 - PORTD Bit 6
;    // Characters/line: 20
;    lcd_init(20);
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;}
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;#include <delay.h>
;// Alphanumeric LCD functions
;#include <DHT_me.c>
;#include <stdio.h>
;#include <string.h>
;#include <mega8.h>
;#include <delay.h>
;
;#include "DHT.h"
;
;//main function that communicates with DHT sensor
;#if DHT_TYPE == 1
;char dht_GetTemp(int *temperature, int *humidity) {
; 0000 001C char dht_GetTemp(int *temperature, int *humidity) {
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;#elif DHT_TYPE == 0
;char dht_GetTemp(char *temperature, char *humidity) {
;#endif
;    unsigned char bits[5];
;    unsigned char i,j = 0;
;    unsigned int timeoutcounter = 0;
;
;    memset(bits, 0, sizeof(bits));
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;	*temperature -> Y+11
;	*humidity -> Y+9
;	bits -> Y+4
;	i -> R17
;	j -> R16
;	timeoutcounter -> R18,R19
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;
;    //prepare correct port and pin of DHT sensor
;    DHT_DDR |= (1 << DHT_INPUTPIN); //output
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;    DHT_PORT |= (1 << DHT_INPUTPIN); //high
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;    delay_ms(100);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;
;    //begin send request
;    DHT_PORT &= ~(1 << DHT_INPUTPIN); //low
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;    #if DHT_TYPE == DHT_DHT11
;    delay_ms(18);
;    #elif DHT_TYPE == DHT_DHT22
;    delay_us(500);
;PCODE: $00000068 VOL: 0
;    #endif
;    DHT_PORT |= (1 << DHT_INPUTPIN); //high
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;    DHT_DDR &= ~(1 << DHT_INPUTPIN); //input
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;    delay_us(40);
;PCODE: $0000006D VOL: 0
;    //check first start condition
;    if((DHT_PIN & (1<<DHT_INPUTPIN))) {
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;        return -1;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;    }
;    delay_us(80);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;
;    //check second start condition
;    if(!(DHT_PIN & (1<<DHT_INPUTPIN))) {
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;        return -1;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;    }
;    delay_us(80);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;
;    //read-in data
;    for (j=0; j<5; j++) { //for each byte (5 total)
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;        unsigned char result = 0;
;        for(i=0; i<8; i++) {//for each bit in each byte (8 total)
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;	*temperature -> Y+12
;	*humidity -> Y+10
;	bits -> Y+5
;	result -> Y+0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;            timeoutcounter = 0;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;            while(!(DHT_PIN & (1<<DHT_INPUTPIN))) { //wait for an high input (non blocking)
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;                timeoutcounter++;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;                if(timeoutcounter > DHT_TIMEOUT) {
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;                    return -1;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;                }
;            }
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;            delay_us(30);
;PCODE: $000000A8 VOL: 0
;            if(DHT_PIN & (1<<DHT_INPUTPIN))
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;                result |= (1<<(7-i));
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;            timeoutcounter = 0;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;            while(DHT_PIN & (1<<DHT_INPUTPIN)) {
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;                timeoutcounter++;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;                if(timeoutcounter > DHT_TIMEOUT) {
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;                    return -1;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;                }
;            }
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;        }
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;        bits[j] = result;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;    }
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;
;    //reset port
;    DHT_DDR |= (1<<DHT_INPUTPIN); //output
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;    DHT_PORT |= (1<<DHT_INPUTPIN); //low
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;    delay_ms(100);
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;
;    //compare checksum
;    if ((unsigned char)(bits[0] + bits[1] + bits[2] + bits[3]) == bits[4]) {
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;        //return temperature and humidity
;        #if DHT_TYPE == DHT_DHT22
;        *temperature = bits[2]<<8 | bits[3];
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;        *humidity = bits[0]<<8 | bits[1];
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;
;        #elif DHT_TYPE == DHT_DHT11
;        *temperature = bits[2];
;        *humidity = bits[0];
;        #endif
;
;        return 0;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;    }
;
;    return -1;
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;}
;PCODE: $00000105 VOL: 0
;
;//function that calls data function read-in
;#if DHT_TYPE == 1
;char dht_GetTempUtil(int *temperature, int *humidity) {
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;    #elif DHT_TYPE == 0
;    unsigned char dht_GetTempUtil(char *temperature, char *humidity) {
;        #endif
;        return dht_GetTemp(temperature, humidity);
;PCODE: $00000108 VOL: 0
;	*temperature -> Y+2
;	*humidity -> Y+0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;    }
;PCODE: $0000010F VOL: 0
;#define MAY_SO PORTB.0
;#define CAP_AM PORTB.1
;#define QUAT_GIO PORTB.2
;#define CHILLER PORTB.3
;#define ON 1
;#define OFF 0
;#define ON_SW PINC.1
;#define SpanOn PINC.2
;// Declare your global variables here
;int temperature_set = 50; //////cai nhiet do o day
;int humidity_set = 50;   //////cai do am o day
;int temperature_int = 0;
;int humidity_int = 0;
;int temperature_float = 0;
;int humidity_float = 0;
;int temperature_raw = 0;
;int humidity_raw = 0;
;unsigned char lcd[20];
;void main(void)
; 0000 0030 {
;PCODE: $00000110 VOL: 0
; 0000 0031     fn_initall();
;PCODE: $00000111 VOL: 0
; 0000 0032     lcd_puts("hello world");
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 0033     delay_ms(500);
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 0034     lcd_clear();
;PCODE: $00000117 VOL: 0
; 0000 0035 while (1)
;PCODE: $00000118 VOL: 0
; 0000 0036       {
; 0000 0037          dht_GetTempUtil(&temperature_raw, &humidity_raw);
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 0038          temperature_int=temperature_raw/10;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 0039          temperature_float=temperature_raw%10;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 003A          humidity_int=humidity_raw/10;
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 003B          humidity_float=humidity_raw%10;
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 003C 
; 0000 003D          sprintf(lcd,"TEMP:%d.%dßC",temperature_int,temperature_float);
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 003E          lcd_gotoxy(0,0);
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 003F          lcd_puts(lcd);
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 0040          sprintf(lcd,"HUM:%d.%d%%",humidity_int,humidity_float);
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 0041          lcd_gotoxy(0,1);
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 0042          lcd_puts(lcd);
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 0043          delay_ms(200);
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 0044          ///////////////HOAT DONG DAU RA///////////
; 0000 0045          if(ON_SW==ON)//bat he thong
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 0046          {
; 0000 0047             //
; 0000 0048              QUAT_GIO=SpanOn;
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 0049 
; 0000 004A                  //bat QUAT_GIO
; 0000 004B              if(temperature_int>temperature_set)  ///nhiet do LON hon cai dat
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 004C              {
; 0000 004D                 if(humidity_int>humidity_set)  ///do am LON hon cai dat
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 004E                 {
; 0000 004F                  MAY_SO=OFF;
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 0050                  CHILLER=ON;
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 0051                  CAP_AM=OFF;
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 0052                 }
; 0000 0053                 if(humidity_int<humidity_set)  ///do am NHO hon cai dat
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 0054                 {
; 0000 0055                  MAY_SO=OFF;
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 0056                  CHILLER=ON;
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 0057                  CAP_AM=ON;
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 0058                 }
; 0000 0059              }
;PCODE: $0000017D VOL: 0
; 0000 005A              if(temperature_int<temperature_set)   ///nhiet do NHO hon cai dat
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 005B              {
; 0000 005C                  if(humidity_int>humidity_set)  ///do am LON hon cai dat
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 005D                 {
; 0000 005E                  MAY_SO=ON;
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 005F                  CHILLER=ON;
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 0060                  CAP_AM=OFF;
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 0061                 }
; 0000 0062                 if(humidity_int<humidity_set)  ///do am NHO hon cai dat
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 0063                 {
; 0000 0064                  MAY_SO=ON;
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 0065                  CHILLER=OFF;
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 0066                  CAP_AM=ON;
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 0067                 }
; 0000 0068              }
;PCODE: $00000195 VOL: 0
; 0000 0069          }
;PCODE: $00000196 VOL: 0
; 0000 006A          if(ON_SW==OFF)//tat he thong
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 006B          {
; 0000 006C             QUAT_GIO =OFF;
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 006D             MAY_SO   =OFF;
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 006E             CHILLER  =OFF;
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 006F             CAP_AM   =OFF;
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 0070          }
; 0000 0071 
; 0000 0072       }
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 0073 }
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0

	.DSEG
_0x15:
	.BYTE 0xC
